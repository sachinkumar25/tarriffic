"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/check-coverage";
exports.ids = ["pages/api/check-coverage"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "papaparse":
/*!****************************!*\
  !*** external "papaparse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("papaparse");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck-coverage&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcheck-coverage.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck-coverage&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcheck-coverage.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_check_coverage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/check-coverage.js */ \"(api)/./pages/api/check-coverage.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_check_coverage_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_check_coverage_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/check-coverage\",\n        pathname: \"/api/check-coverage\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_check_coverage_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoZWNrLWNvdmVyYWdlJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZjaGVjay1jb3ZlcmFnZS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMwRDtBQUMxRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMseURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHlEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RhcmlmZi1pbnNpZ2h0cy8/ZTM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2NoZWNrLWNvdmVyYWdlLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hlY2stY292ZXJhZ2VcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGVjay1jb3ZlcmFnZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck-coverage&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcheck-coverage.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/csvLoader.js":
/*!**************************!*\
  !*** ./lib/csvLoader.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateTariffRevenue: () => (/* binding */ calculateTariffRevenue),\n/* harmony export */   formatTariffRate: () => (/* binding */ formatTariffRate),\n/* harmony export */   formatTradeValue: () => (/* binding */ formatTradeValue),\n/* harmony export */   getHS4Category: () => (/* binding */ getHS4Category),\n/* harmony export */   getSummaryFilename: () => (/* binding */ getSummaryFilename),\n/* harmony export */   loadCSV: () => (/* binding */ loadCSV),\n/* harmony export */   loadJSON: () => (/* binding */ loadJSON),\n/* harmony export */   validateHS4: () => (/* binding */ validateHS4)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"papaparse\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n/**\n * CSV Loader Utility\n * Shared functions for parsing CSV files and loading JSON data\n */ \n\n\n/**\n * Get the absolute path to the data/processed directory\n */ function getDataPath() {\n    return path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data-curator\", \"data\", \"processed\");\n}\n/**\n * Check if expanded dataset exists and is newer than merged dataset\n * @returns {string} Filename to use ('expanded_summary.csv' or 'merged_summary.csv')\n */ function getSummaryFilename() {\n    const dataPath = getDataPath();\n    const expandedFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataPath, \"expanded_summary.csv\");\n    const mergedFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataPath, \"merged_summary.csv\");\n    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(expandedFile)) {\n        return \"expanded_summary.csv\";\n    } else if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(mergedFile)) {\n        return \"merged_summary.csv\";\n    } else {\n        throw new Error(\"No summary dataset found. Please run the data expansion script.\");\n    }\n}\n/**\n * Parse CSV file and return as JSON array\n * @param {string} filename - CSV filename in data/processed directory\n * @returns {Promise<Array>} Parsed CSV data as JSON array\n */ async function loadCSV(filename) {\n    try {\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(getDataPath(), filename);\n        // Check if file exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n            throw new Error(`File not found: ${filename}`);\n        }\n        // Read file content\n        const fileContent = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        // Parse CSV\n        const result = (0,papaparse__WEBPACK_IMPORTED_MODULE_2__.parse)(fileContent, {\n            header: true,\n            skipEmptyLines: true,\n            transformHeader: (header)=>header.trim(),\n            transform: (value, field)=>{\n                // Convert numeric strings to numbers where appropriate\n                if (value === \"\") return null;\n                // Keep HS4 codes as strings\n                if (field === \"hs4\") {\n                    return value.toString();\n                }\n                // Convert other numeric fields to numbers\n                if (!isNaN(value) && value !== \"\") {\n                    return parseFloat(value);\n                }\n                return value;\n            }\n        });\n        if (result.errors.length > 0) {\n            console.warn(`CSV parsing warnings for ${filename}:`, result.errors);\n        }\n        return result.data;\n    } catch (error) {\n        console.error(`Error loading CSV ${filename}:`, error);\n        throw error;\n    }\n}\n/**\n * Load JSON file and return parsed data\n * @param {string} filename - JSON filename in data/processed directory\n * @returns {Promise<Object>} Parsed JSON data\n */ async function loadJSON(filename) {\n    try {\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(getDataPath(), filename);\n        // Check if file exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n            throw new Error(`File not found: ${filename}`);\n        }\n        // Read and parse JSON\n        const fileContent = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf8\");\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error(`Error loading JSON ${filename}:`, error);\n        throw error;\n    }\n}\n/**\n * Validate HS4 code format (4 digits)\n * @param {string} hs4 - HS4 code to validate\n * @returns {boolean} True if valid HS4 format\n */ function validateHS4(hs4) {\n    if (!hs4 || typeof hs4 !== \"string\") {\n        return false;\n    }\n    // Check if it's exactly 4 digits\n    const hs4Regex = /^\\d{4}$/;\n    return hs4Regex.test(hs4);\n}\n/**\n * Calculate tariff revenue estimate\n * @param {number} tariffRate - Tariff rate as percentage\n * @param {number} tradeValue - Trade value in USD\n * @returns {number} Estimated tariff revenue in USD\n */ function calculateTariffRevenue(tariffRate, tradeValue) {\n    if (!tariffRate || !tradeValue || tariffRate < 0 || tradeValue < 0) {\n        return 0;\n    }\n    return tariffRate / 100 * tradeValue;\n}\n/**\n * Format trade value for display\n * @param {number} value - Trade value in USD\n * @returns {string} Formatted value (e.g., \"1.2B\", \"500M\")\n */ function formatTradeValue(value) {\n    if (!value || value < 0) return \"$0\";\n    if (value >= 1e12) {\n        return `$${(value / 1e12).toFixed(1)}T`;\n    } else if (value >= 1e9) {\n        return `$${(value / 1e9).toFixed(1)}B`;\n    } else if (value >= 1e6) {\n        return `$${(value / 1e6).toFixed(1)}M`;\n    } else if (value >= 1e3) {\n        return `$${(value / 1e3).toFixed(1)}K`;\n    } else {\n        return `$${value.toFixed(0)}`;\n    }\n}\n/**\n * Format tariff rate for display\n * @param {number} rate - Tariff rate as percentage\n * @returns {string} Formatted rate (e.g., \"5.2%\")\n */ function formatTariffRate(rate) {\n    if (!rate || rate < 0) return \"0%\";\n    return `${rate.toFixed(2)}%`;\n}\n/**\n * Get HS4 category description from 2-digit prefix\n * @param {string} hs4 - 4-digit HS4 code\n * @returns {string} Category description\n */ function getHS4Category(hs4) {\n    if (!hs4 || hs4.length < 2) return \"Unknown\";\n    const prefix = hs4.substring(0, 2);\n    const categoryMap = {\n        \"01\": \"Live animals & animal products\",\n        \"02\": \"Meat and edible meat offal\",\n        \"03\": \"Fish and crustaceans\",\n        \"04\": \"Dairy products\",\n        \"05\": \"Products of animal origin\",\n        \"06\": \"Live trees and plants\",\n        \"07\": \"Edible vegetables\",\n        \"08\": \"Edible fruits and nuts\",\n        \"09\": \"Coffee, tea, mate and spices\",\n        \"10\": \"Cereals\",\n        \"11\": \"Products of the milling industry\",\n        \"12\": \"Oil seeds and oleaginous fruits\",\n        \"13\": \"Lac; gums, resins and other vegetable saps\",\n        \"14\": \"Vegetable plaiting materials\",\n        \"15\": \"Animal or vegetable fats and oils\",\n        \"16\": \"Preparations of meat, fish or crustaceans\",\n        \"17\": \"Sugars and sugar confectionery\",\n        \"18\": \"Cocoa and cocoa preparations\",\n        \"19\": \"Preparations of cereals, flour, starch or milk\",\n        \"20\": \"Preparations of vegetables, fruit, nuts\",\n        \"21\": \"Miscellaneous edible preparations\",\n        \"22\": \"Beverages, spirits and vinegar\",\n        \"23\": \"Residues and wastes from the food industries\",\n        \"24\": \"Tobacco and manufactured tobacco substitutes\",\n        \"25\": \"Salt; sulphur; earths and stone\",\n        \"26\": \"Ores, slag and ash\",\n        \"27\": \"Mineral fuels, mineral oils\",\n        \"28\": \"Inorganic chemicals\",\n        \"29\": \"Organic chemicals\",\n        \"30\": \"Pharmaceutical products\",\n        \"31\": \"Fertilisers\",\n        \"32\": \"Tanning or dyeing extracts\",\n        \"33\": \"Essential oils and resinoids\",\n        \"34\": \"Soap, organic surface-active agents\",\n        \"35\": \"Albuminoidal substances\",\n        \"36\": \"Explosives; pyrotechnic products\",\n        \"37\": \"Photographic or cinematographic goods\",\n        \"38\": \"Miscellaneous chemical products\",\n        \"39\": \"Plastics and articles thereof\",\n        \"40\": \"Rubber and articles thereof\",\n        \"41\": \"Raw hides and skins\",\n        \"42\": \"Articles of leather\",\n        \"43\": \"Furskins and artificial fur\",\n        \"44\": \"Wood and articles of wood\",\n        \"45\": \"Cork and articles of cork\",\n        \"46\": \"Manufactures of straw\",\n        \"47\": \"Pulp of wood or of other fibrous cellulosic material\",\n        \"48\": \"Paper and paperboard\",\n        \"49\": \"Printed books, newspapers, pictures\",\n        \"50\": \"Silk\",\n        \"51\": \"Wool, fine or coarse animal hair\",\n        \"52\": \"Cotton\",\n        \"53\": \"Other vegetable textile fibres\",\n        \"54\": \"Man-made filaments\",\n        \"55\": \"Man-made staple fibres\",\n        \"56\": \"Wadding, felt and nonwovens\",\n        \"57\": \"Carpets and other textile floor coverings\",\n        \"58\": \"Special woven fabrics\",\n        \"59\": \"Impregnated, coated, covered or laminated textile fabrics\",\n        \"60\": \"Knitted or crocheted fabrics\",\n        \"61\": \"Articles of apparel and clothing accessories\",\n        \"62\": \"Articles of apparel and clothing accessories\",\n        \"63\": \"Other made up textile articles\",\n        \"64\": \"Footwear, gaiters and the like\",\n        \"65\": \"Headgear and parts thereof\",\n        \"66\": \"Umbrellas, sun umbrellas, walking sticks\",\n        \"67\": \"Prepared feathers and down\",\n        \"68\": \"Articles of stone, plaster, cement, asbestos\",\n        \"69\": \"Ceramic products\",\n        \"70\": \"Glass and glassware\",\n        \"71\": \"Natural or cultured pearls, precious stones\",\n        \"72\": \"Iron and steel\",\n        \"73\": \"Articles of iron or steel\",\n        \"74\": \"Copper and articles thereof\",\n        \"75\": \"Nickel and articles thereof\",\n        \"76\": \"Aluminium and articles thereof\",\n        \"78\": \"Lead and articles thereof\",\n        \"79\": \"Zinc and articles thereof\",\n        \"80\": \"Tin and articles thereof\",\n        \"81\": \"Other base metals\",\n        \"82\": \"Tools, implements, cutlery, spoons and forks\",\n        \"83\": \"Miscellaneous articles of base metal\",\n        \"84\": \"Nuclear reactors, boilers, machinery\",\n        \"85\": \"Electrical machinery and equipment\",\n        \"86\": \"Railway or tramway locomotives\",\n        \"87\": \"Vehicles other than railway or tramway rolling stock\",\n        \"88\": \"Aircraft, spacecraft, and parts thereof\",\n        \"89\": \"Ships, boats and floating structures\",\n        \"90\": \"Optical, photographic, cinematographic, measuring\",\n        \"91\": \"Clocks and watches and parts thereof\",\n        \"92\": \"Musical instruments\",\n        \"93\": \"Arms and ammunition\",\n        \"94\": \"Furniture; bedding, mattresses\",\n        \"95\": \"Toys, games and sports requisites\",\n        \"96\": \"Miscellaneous manufactured articles\",\n        \"97\": \"Works of art, collectors' pieces and antiques\"\n    };\n    return categoryMap[prefix] || \"Other products\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/csvLoader.js\n");

/***/ }),

/***/ "(api)/./pages/api/check-coverage.js":
/*!*************************************!*\
  !*** ./pages/api/check-coverage.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_csvLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/csvLoader */ \"(api)/./lib/csvLoader.js\");\n/**\n * GET /api/check-coverage\n * Debug endpoint to check data coverage and expansion statistics\n * \n * Response format:\n * {\n *   status: \"success\",\n *   data: {\n *     dataset_info: {...},\n *     coverage_stats: {...},\n *     partner_breakdown: {...},\n *     hs4_breakdown: {...}\n *   }\n * }\n */ \nasync function handler(req, res) {\n    // Only allow GET requests\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            status: \"error\",\n            message: \"Method not allowed. Use GET.\"\n        });\n    }\n    try {\n        // Load the summary data\n        const filename = (0,_lib_csvLoader__WEBPACK_IMPORTED_MODULE_0__.getSummaryFilename)();\n        const data = await (0,_lib_csvLoader__WEBPACK_IMPORTED_MODULE_0__.loadCSV)(filename);\n        // Load validation results if available\n        let validationResults = null;\n        try {\n            validationResults = await (0,_lib_csvLoader__WEBPACK_IMPORTED_MODULE_0__.loadJSON)(\"expansion_validation.json\");\n        } catch (error) {\n        // Validation file not available, continue without it\n        }\n        // Calculate coverage statistics\n        const totalRecords = data.length;\n        const uniqueHs4Codes = new Set(data.map((row)=>row.hs4)).size;\n        const uniquePartners = new Set(data.map((row)=>row.partner_name || \"Unknown\")).size;\n        const totalTradeValue = data.reduce((sum, row)=>sum + (row.trade_value_total || 0), 0);\n        const totalTariffRevenue = data.reduce((sum, row)=>sum + (row.tariff_revenue_estimate || 0), 0);\n        // Partner breakdown\n        const partnerStats = {};\n        data.forEach((row)=>{\n            const partner = row.partner_name || \"Unknown\";\n            if (!partnerStats[partner]) {\n                partnerStats[partner] = {\n                    hs4_count: 0,\n                    trade_value_total: 0,\n                    tariff_revenue_total: 0\n                };\n            }\n            partnerStats[partner].hs4_count += 1;\n            partnerStats[partner].trade_value_total += row.trade_value_total || 0;\n            partnerStats[partner].tariff_revenue_total += row.tariff_revenue_estimate || 0;\n        });\n        // Top partners by trade value\n        const topPartners = Object.entries(partnerStats).map(([partner, stats])=>({\n                partner,\n                hs4_count: stats.hs4_count,\n                trade_value_total: stats.trade_value_total,\n                tariff_revenue_total: stats.tariff_revenue_total,\n                trade_share: (stats.trade_value_total / totalTradeValue * 100).toFixed(2)\n            })).sort((a, b)=>b.trade_value_total - a.trade_value_total).slice(0, 20);\n        // HS4 breakdown\n        const hs4Stats = {};\n        data.forEach((row)=>{\n            const hs4 = row.hs4;\n            if (!hs4Stats[hs4]) {\n                hs4Stats[hs4] = {\n                    partner_count: 0,\n                    trade_value_total: 0,\n                    tariff_rate: row.simple_average || 0,\n                    category: row.category || \"Unknown\"\n                };\n            }\n            hs4Stats[hs4].partner_count += 1;\n            hs4Stats[hs4].trade_value_total += row.trade_value_total || 0;\n        });\n        // Top HS4 codes by trade value\n        const topHs4Codes = Object.entries(hs4Stats).map(([hs4, stats])=>({\n                hs4,\n                partner_count: stats.partner_count,\n                trade_value_total: stats.trade_value_total,\n                tariff_rate: stats.tariff_rate,\n                category: stats.category,\n                trade_share: (stats.trade_value_total / totalTradeValue * 100).toFixed(2)\n            })).sort((a, b)=>b.trade_value_total - a.trade_value_total).slice(0, 20);\n        // Category breakdown\n        const categoryStats = {};\n        data.forEach((row)=>{\n            const category = row.category || \"Unknown\";\n            if (!categoryStats[category]) {\n                categoryStats[category] = {\n                    hs4_count: 0,\n                    partner_count: 0,\n                    trade_value_total: 0\n                };\n            }\n            categoryStats[category].hs4_count += 1;\n            categoryStats[category].trade_value_total += row.trade_value_total || 0;\n        });\n        // Count unique partners per category\n        Object.keys(categoryStats).forEach((category)=>{\n            const partners = new Set(data.filter((row)=>row.category === category).map((row)=>row.partner_name));\n            categoryStats[category].partner_count = partners.size;\n        });\n        const topCategories = Object.entries(categoryStats).map(([category, stats])=>({\n                category,\n                hs4_count: stats.hs4_count,\n                partner_count: stats.partner_count,\n                trade_value_total: stats.trade_value_total,\n                trade_share: (stats.trade_value_total / totalTradeValue * 100).toFixed(2)\n            })).sort((a, b)=>b.trade_value_total - a.trade_value_total).slice(0, 15);\n        // Determine if this is expanded data\n        const isExpanded = filename === \"expanded_summary.csv\";\n        const hasPartnerData = data.some((row)=>row.partner_name && row.partner_name !== \"World\");\n        // Return successful response\n        res.status(200).json({\n            status: \"success\",\n            data: {\n                dataset_info: {\n                    filename,\n                    is_expanded: isExpanded,\n                    has_partner_data: hasPartnerData,\n                    last_updated: validationResults?.lastUpdated || \"Unknown\"\n                },\n                coverage_stats: {\n                    total_records: totalRecords,\n                    unique_hs4_codes: uniqueHs4Codes,\n                    unique_partners: uniquePartners,\n                    total_trade_value: totalTradeValue,\n                    total_tariff_revenue: totalTariffRevenue,\n                    average_tariff: data.reduce((sum, row)=>sum + (row.simple_average || 0), 0) / data.length,\n                    expansion_ratio: validationResults ? validationResults.total_records / 168 : null\n                },\n                partner_breakdown: {\n                    total_partners: uniquePartners,\n                    top_partners: topPartners,\n                    partner_with_most_hs4: Object.entries(partnerStats).sort((a, b)=>b[1].hs4_count - a[1].hs4_count)[0]\n                },\n                hs4_breakdown: {\n                    total_hs4_codes: uniqueHs4Codes,\n                    top_hs4_codes: topHs4Codes,\n                    hs4_with_most_partners: Object.entries(hs4Stats).sort((a, b)=>b[1].partner_count - a[1].partner_count)[0]\n                },\n                category_breakdown: {\n                    total_categories: Object.keys(categoryStats).length,\n                    top_categories: topCategories\n                },\n                validation_results: validationResults\n            }\n        });\n    } catch (error) {\n        console.error(\"Error in /api/check-coverage:\", error);\n        res.status(500).json({\n            status: \"error\",\n            message: \"Failed to load coverage data\",\n            details:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/check-coverage.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck-coverage&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcheck-coverage.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();